#!/usr/bin/env node

const path = require('path');
const fse = require('fs-extra');
const program = require('commander');
const boxen = require('boxen');
const chalk = require('chalk');
const {cd, exec, which} = require('shelljs');
const hasYarn = () => Boolean(which('yarn'));

program
  .arguments('[name]')
  .option('-d, --docker', 'include dockerfile (mhart/alpine-node)')
  .option('-n, --node [version]', 'NodeJS 6/8 (mhart/alpine-node)')
  .action(name =>
    create({name, docker: program.docker, nodeVersion: program.node})
  )
  .parse(process.argv);

if (!program.args.length) create(program.opts());

function create({name, docker, nodeVersion = '8'}) {
  if (!name) {
    console.error(chalk.red(`Enter a project name.`));
    process.exit(1);
  }

  const projectDir = path.resolve(process.cwd(), name);
  fse
    .ensureDir(projectDir)
    .then(() =>
      fse.outputFile(path.resolve(projectDir, 'index.js'), createSrcTmpl())
    )
    .then(() =>
      fse.outputFile(
        path.resolve(projectDir, 'index.test.js'),
        createTestTmpl()
      )
    )
    .then(() =>
      fse.outputFile(
        path.resolve(projectDir, 'package.json'),
        createPackageTmpl({name, nodeVersion})
      )
    )
    .then(
      () =>
        docker
          ? fse.outputFile(
              path.resolve(projectDir, 'Dockerfile'),
              createDockerTmpl({name, nodeVersion})
            )
          : Promise.resolve()
    )
    .then(() => install({path: projectDir}))
    .then(data => {
      let message = `${chalk.green(
        `Linklet ${name} created.\nServe Micro-Service with:\n\n`
      )}`;
      message += `${chalk.gray.bold(`linklet serve ${name}`)}`;
      console.log(boxen(message, {padding: 1, borderColor: 'gray', margin: 1}));
    })
    .catch(err => {
      console.error(chalk.red(`An unexpected error occured. ${err.message}`));
      process.exit(1);
    });
}

function install({path}) {
  return new Promise((resolve, reject) => {
    cd(path);
    const installCmd = hasYarn() ? 'yarn' : 'npm install';

    exec(installCmd, (code, stdout, stderr) => {
      if (code !== 0) return reject(stderr);
      resolve();
    });
  });
}

function createSrcTmpl() {
  return `module.exports = async () => {
  return {
    msg: 'Hello World from Linklet!',
  };
};`;
}

function createTestTmpl() {
  return `const assert = require('assert');
const fetch = require('node-fetch');
const linklet = require('linklet');

describe('Unit tests', () => {
  it('should yield something ...', async () => {
    const service = require('./index');

    const actual = await service();

    assert.deepEqual(actual, {msg: 'Hello World from Linklet!'});
  });
});

describe('Integration tests', () => {
  it('should fetch something ...', async () => {
    const service = require('./index');
    const server = linklet(service);
    const instance = await linklet.listen(server, {silent: true});

    const actual = await fetch(instance.url).then(res => res.json());

    assert.deepEqual(actual, {msg: 'Hello World from Linklet!'});
  });

});`;
}

function createPackageTmpl({name, nodeVersion}) {
  return `{
  "private": "true",
  "name": "${name}",
  "version": "0.0.0",
  "main": "index.js",
  "scripts": {
    "start": "NODE_ENV=production linklet serve",
    "dev": "NODE_ENV=development nodemon --exec linklet serve -p 3000",
    "test": "mocha --require async-to-gen/register index.test.js",
    "test:watch": "mocha --watch --require async-to-gen/register index.test.js"
  },
  "engines": {
    "node": "^${nodeVersion}"
  },
  "dependencies": {
    "linklet": "latest"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "^3.4.2",
    "nodemon": "^1.11.0",
    "node-fetch": "^1.7.0"
  }
}`;
}

function createDockerTmpl({name, nodeVersion}) {
  return `FROM mhart/alpine-node:${nodeVersion}

STOPSIGNAL SIGINT
RUN apk add --no-cache dumb-init

LABEL name "${name}"

RUN mkdir /app
WORKDIR /app
COPY package.json /app
RUN npm install --production
COPY . /app

EXPOSE 80
CMD ["dumb-init", "npm", "start"]`;
}
